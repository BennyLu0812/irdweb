<?xml version="1.0" encoding="UTF-8"?>
<queries>

	<getInspectionDataStatisticsPage type="sql">
		<![CDATA[
            SELECT
                *
            FROM
                (
                SELECT
                    ROW_NUMBER ( ) OVER ( PARTITION BY vir.INSP_MASTER_ID ORDER BY vir.NO_OF_TIMES_INSP DESC ) AS ROW,
                    vir.INSP_TIME,
                    vir.INSP_MASTER_ID,
                    vir.NO_OF_TIMES_INSP,
                    vir.PLATE_NO,
                    vir.VEH_TYPE,
                    vir.CVIC_INSP_TYPE,
                    vit.INSP_SUBTYPE_ID,
                    vir.INSP_LINE_NO,
                    A_OVERALL_RESULT AS AOVERALL_RESULT,
                    B_OVERALL_RESULT AS BOVERALL_RESULT,
                    C_OVERALL_RESULT AS COVERALL_RESULT,
                    D_OVERALL_RESULT AS DOVERALL_RESULT,
                    E_OVERALL_RESULT AS EOVERALL_RESULT,
                    F_OVERALL_RESULT AS FOVERALL_RESULT,
                    G_SIDESLIP_RESULT AS GSIDESLIP_RESULT,
                    H_BRK_EFF_T_RESULT AS HBRK_EFF_T_RESULT,
                    I_BRK_RESULT AS IBRK_RESULT,
                    J_PARK_EFF_T_RESULT AS JPARK_EFF_T_RESULT,
                    K_PARK_RESULT AS KPARK_RESULT,
                    L_OVERALL_RESULT AS LOVERALL_RESULT,
                    M_ENGINE_NOISE_RESULT AS MENGINE_NOISE_RESULT,
                    P_OVERALL_RESULT AS POVERALL_RESULT,
                    MECHANICAL_INSPECTION_RESULT,
                    INSPECTION_RESULT
                FROM
                    IRD_INP_RESULT vir WITH ( NOLOCK )
                    INNER JOIN IRD_INP_TASK vit (NOLOCK) ON vit.INSP_MASTER_ID = vir.INSP_MASTER_ID AND vit.NO_OF_TIMES_INSP = vir.NO_OF_TIMES_INSP AND vit.STATUS = 'A'
                WHERE
                    vir.CENTER_CODE = :centerCode
                    AND vir.STATUS = 'A'
                    AND vir.INSPECTION_RESULT IS NOT NULL
                    AND vir.INSP_TIME >= :startDate
                    AND vir.INSP_TIME < DATEADD(DAY, 1, :endDate)
                ) a
            WHERE
                ROW = 1
        ]]>
	</getInspectionDataStatisticsPage>

	<getInspectionItemStatisticsPage type="sql">
		<![CDATA[
			SELECT
				INSPECTION_TIME,
				COUNT(INSPECTION_RESULT) AS INSPECTION_COUNT,
				SUM(CASE INSPECTION_RESULT WHEN '1' THEN 1 ELSE 0 END) AS INSPECTION_PASS_COUNT,
				SUM(CASE INSPECTION_RESULT WHEN '1' THEN 0 ELSE 1 END) AS INSPECTION_NO_PASS_COUNT,
				COUNT(A_OVERALL_RESULT) AS AA_COUNT,
				SUM(CASE A_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS AA_PASS_COUNT,
				SUM(CASE A_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS AA_NO_PASS_COUNT,
				COUNT(B_OVERALL_RESULT) AS BB_COUNT,
				SUM(CASE B_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS BB_PASS_COUNT,
				SUM(CASE B_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS BB_NO_PASS_COUNT,
				COUNT(C_OVERALL_RESULT) AS CC_COUNT,
				SUM(CASE C_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS CC_PASS_COUNT,
				SUM(CASE C_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS CC_NO_PASS_COUNT,
				COUNT(D_OVERALL_RESULT) AS DD_COUNT,
				SUM(CASE D_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS DD_PASS_COUNT,
				SUM(CASE D_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS DD_NO_PASS_COUNT,
				COUNT(E_OVERALL_RESULT) AS EE_COUNT,
				SUM(CASE E_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS EE_PASS_COUNT,
				SUM(CASE E_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS EE_NO_PASS_COUNT,
				COUNT(F_OVERALL_RESULT) AS FF_COUNT,
				SUM(CASE F_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS FF_PASS_COUNT,
				SUM(CASE F_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS FF_NO_PASS_COUNT,
				COUNT(G_SIDESLIP_RESULT) AS GG_COUNT,
				SUM(CASE G_SIDESLIP_RESULT WHEN '1' THEN 1 ELSE 0 END) AS GG_PASS_COUNT,
				SUM(CASE G_SIDESLIP_RESULT WHEN '2' THEN 1 ELSE 0 END) AS GG_NO_PASS_COUNT,
				COUNT(H_BRK_EFF_T_RESULT) AS HH_COUNT,
				SUM(CASE H_BRK_EFF_T_RESULT WHEN '1' THEN 1 ELSE 0 END) AS HH_PASS_COUNT,
				SUM(CASE H_BRK_EFF_T_RESULT WHEN '2' THEN 1 ELSE 0 END) AS HH_NO_PASS_COUNT,
				COUNT(I_BRK_RESULT) AS II_COUNT,
				SUM(CASE I_BRK_RESULT WHEN '1' THEN 1 ELSE 0 END) AS II_PASS_COUNT,
				SUM(CASE I_BRK_RESULT WHEN '2' THEN 1 ELSE 0 END) AS II_NO_PASS_COUNT,
				COUNT(J_PARK_EFF_T_RESULT) AS JJ_COUNT,
				SUM(CASE J_PARK_EFF_T_RESULT WHEN '1' THEN 1 ELSE 0 END) AS JJ_PASS_COUNT,
				SUM(CASE J_PARK_EFF_T_RESULT WHEN '2' THEN 1 ELSE 0 END) AS JJ_NO_PASS_COUNT,
				COUNT(K_PARK_RESULT) AS KK_COUNT,
				SUM(CASE K_PARK_RESULT WHEN '1' THEN 1 ELSE 0 END) AS KK_PASS_COUNT,
				SUM(CASE K_PARK_RESULT WHEN '2' THEN 1 ELSE 0 END) AS KK_NO_PASS_COUNT,
				COUNT(L_OVERALL_RESULT) AS LL_COUNT,
				SUM(CASE L_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS LL_PASS_COUNT,
				SUM(CASE L_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS LL_NO_PASS_COUNT,
				COUNT(M_ENGINE_NOISE_RESULT) AS MM_COUNT,
				SUM(CASE M_ENGINE_NOISE_RESULT WHEN '1' THEN 1 ELSE 0 END) AS MM_PASS_COUNT,
				SUM(CASE M_ENGINE_NOISE_RESULT WHEN '2' THEN 1 ELSE 0 END) AS MM_NO_PASS_COUNT,
				COUNT(P_OVERALL_RESULT) AS PP_COUNT,
				SUM(CASE P_OVERALL_RESULT WHEN '1' THEN 1 ELSE 0 END) AS PP_PASS_COUNT,
				SUM(CASE P_OVERALL_RESULT WHEN '2' THEN 1 ELSE 0 END) AS PP_NO_PASS_COUNT,
				COUNT(MECHANICAL_INSPECTION_RESULT) AS MECHANICAL_INSPECTION_COUNT,
				SUM(CASE MECHANICAL_INSPECTION_RESULT WHEN '1' THEN 1 ELSE 0 END) AS MECHANICAL_INSPECTION_PASS_COUNT,
				SUM(CASE MECHANICAL_INSPECTION_RESULT WHEN '2' THEN 1 ELSE 0 END) AS MECHANICAL_INSPECTION_NO_PASS_COUNT
			FROM
				(
				SELECT
					CONVERT(DATE, INSP_TIME) AS INSPECTION_TIME,
					ROW_NUMBER ( ) OVER ( PARTITION BY IRD_INP_RESULT.INSP_MASTER_ID ORDER BY IRD_INP_RESULT.INSP_TIME DESC ) AS ROW,
					ISNULL(ISNULL(A_OVERALL_RESULT,LAG(A_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(A_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) A_OVERALL_RESULT,
					ISNULL(ISNULL(B_OVERALL_RESULT,LAG(B_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(B_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) B_OVERALL_RESULT,
					ISNULL(ISNULL(C_OVERALL_RESULT,LAG(C_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(C_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) C_OVERALL_RESULT,
					ISNULL(ISNULL(D_OVERALL_RESULT,LAG(D_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(D_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) D_OVERALL_RESULT,
					ISNULL(ISNULL(E_OVERALL_RESULT,LAG(E_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(E_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) E_OVERALL_RESULT,
					ISNULL(ISNULL(F_OVERALL_RESULT,LAG(F_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(F_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) F_OVERALL_RESULT,
					ISNULL(ISNULL(G_SIDESLIP_RESULT,LAG(G_SIDESLIP_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(G_SIDESLIP_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) G_SIDESLIP_RESULT,
					ISNULL(ISNULL(H_BRK_EFF_T_RESULT,LAG(H_BRK_EFF_T_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(H_BRK_EFF_T_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) H_BRK_EFF_T_RESULT,
					ISNULL(ISNULL(I_BRK_RESULT,LAG(I_BRK_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(I_BRK_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) I_BRK_RESULT,
					ISNULL(ISNULL(J_PARK_EFF_T_RESULT,LAG(J_PARK_EFF_T_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(J_PARK_EFF_T_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) J_PARK_EFF_T_RESULT,
					ISNULL(ISNULL(K_PARK_RESULT,LAG(K_PARK_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(K_PARK_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) K_PARK_RESULT,
					ISNULL(ISNULL(L_OVERALL_RESULT,LAG(L_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(L_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) L_OVERALL_RESULT,
					ISNULL(ISNULL(M_ENGINE_NOISE_RESULT,LAG(M_ENGINE_NOISE_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(M_ENGINE_NOISE_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) M_ENGINE_NOISE_RESULT,
					ISNULL(ISNULL(P_OVERALL_RESULT,LAG(P_OVERALL_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(P_OVERALL_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) P_OVERALL_RESULT,
					ISNULL(ISNULL(MECHANICAL_INSPECTION_RESULT,LAG(MECHANICAL_INSPECTION_RESULT,1) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)),LAG(MECHANICAL_INSPECTION_RESULT,2) OVER(PARTITION BY INSP_MASTER_ID ORDER BY NO_OF_TIMES_INSP)) MECHANICAL_INSPECTION_RESULT,
					INSPECTION_RESULT
				FROM
					IRD_INP_RESULT WITH ( NOLOCK )
				WHERE
					CENTER_CODE = :centerCode
                    AND STATUS = 'A'
                    AND INSPECTION_RESULT IS NOT NULL
                    AND INSP_TIME >= :startDate
                    AND INSP_TIME < DATEADD(DAY, 1, :endDate)
				) a
			WHERE
				ROW = 1
			GROUP BY INSPECTION_TIME
		]]>
	</getInspectionItemStatisticsPage>

	<getPdaLoginLogoutLogPage type="sql">
		<![CDATA[
			SELECT
				b.USER_ID AS userId,
				a.WORK_STATUS AS workStatus,
				a.CREATE_DATE AS createDate,
				c.WORK_TIME_TYPE AS workTimeType,
				ROW_NUMBER () OVER ( /**/ORDER/**/ BY a.CREATE_DATE ASC ) AS ROW
			FROM
				IRD_INP_INSPECTOR_STATUS_LOG a WITH(NOLOCK)
				INNER JOIN IRD_INP_INSPECTOR b WITH(NOLOCK) ON a.INSPECTOR_ID = b.INSPECTOR_ID AND b.STATUS = 'A'
				LEFT JOIN IRD_INP_INSPECTOR_ATTEND c WITH(NOLOCK) ON a.INSPECTOR_ID = c.INSPECTOR_ID AND c.STATUS = 'A'
				AND DATEDIFF(DAY, a.CREATE_DATE, c.ATTEND_DATE) = 0
			WHERE
				c.WORK_TIME_TYPE IS NOT NULL
				AND b.CENTER_CODE = :centerCode
				AND a.CREATE_DATE >= :startDate
				AND a.CREATE_DATE < DATEADD(DAY, 1, :endDate)
		]]>
	</getPdaLoginLogoutLogPage>

	<getAsmInspDataStatisticsPage type="sql">
		<![CDATA[
			SELECT
				a.INSP_MASTER_ID AS inspMasterId,
				a.NO_OF_TIMES_INSP AS noOfTimesInsp,
				c.CENTER_NAME_CN AS centerNameCn,
				a.PLATE_NO AS plateNo,
				b.VEH_TYPE AS vehType,
				b.VIN AS vin,
				a.ENGINE_NO AS engineNo,
				b.VEH_BRAND_CODE AS vehBrandCode,
				b.VEH_MODEL AS vehModel,
				b.VEH_BUILD_YEAR AS vehBuildYear,
				b.VTA_YEAR AS vtaYear,
				b.VEH_REG_DATE AS vehRegDate,
				b.MAX_POWER AS maxPower,
				b.POWER_UNIT_TYPE AS powerUnitType,
				b.CYLINDER_VOL AS cylinderVol,
				b.FUEL_TYPE AS fuelType,
				d.CODE_CNAME AS fuelTypeCn,
				d.CODE_PNAME AS fuelTypePt,
				e.CODE_CNAME AS fuelSupplyTypeCn,
				b.VEH_CATEGORY AS vehCategory,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_CNAME ELSE f.CODE_CNAME END AS vehCategoryCn,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_PNAME ELSE f.CODE_PNAME END AS vehCategoryPt,
				b.VEH_USAGE_CODE AS vehUsageCode,
				h.CODE_CNAME AS vehUsageCodeCn,
				H.CODE_PNAME AS vehUsageCodePt,
				b.VEH_BUILD_CTRY_CODE AS vehBuildCtryCode,
				b.VEH_WEIGHT AS vehWeight,
				b.VEH_GROSS_WEIGHT AS vehGrossWeight,
				a.INSP_TIME AS inspTime,
				a.E_CO_5025 AS eeCo5025,
				a.E_CO_5025_RESULT AS eeCo5025Result,
				a.E_HC_5025 AS eeHc5025,
				a.E_HC_5025_RESULT AS eeHc5025Result,
				a.E_NO_5025 AS eeNo5025,
				a.E_NO_5025_RESULT AS eeNo5025Result,
				a.E_CO_2540 AS eeCo2540,
				a.E_CO_2540_RESULT AS eeCo2540Result,
				a.E_HC_2540 AS eeHc2540,
				a.E_HC_2540_RESULT AS eeHc2540Result,
				a.E_NO_2540 AS eeNo2540,
				a.E_NO_2540_RESULT AS eeNo2540Result,
				a.E_OVERALL_RESULT AS eeOverAllResult,
				ROW_NUMBER () OVER ( /**/ORDER/**/ BY a.INSP_TIME ASC ) AS ROW
			FROM
				IRD_INP_RESULT a WITH(NOLOCK)
				LEFT JOIN IRD_VEM_VEHICLE b WITH(NOLOCK) ON a.VEH_ID = b.VEH_ID
				LEFT JOIN IRD_CTR_CENTER c WITH(NOLOCK) ON c.CENTER_CODE = a.CENTER_CODE
				LEFT JOIN IRD_SYS_CODE d WITH(NOLOCK) ON d.CODE_TYPE = 31212 AND b.FUEL_TYPE = d.CODE_KEY
				LEFT JOIN IRD_SYS_CODE e WITH(NOLOCK) ON e.CODE_TYPE = 31219 AND b.FUEL_SUPPLY_TYPE = e.CODE_KEY
				LEFT JOIN IRD_SYS_CODE f WITH(NOLOCK) ON f.CODE_TYPE = 31205 AND b.VEH_CATEGORY = f.CODE_KEY
				LEFT JOIN IRD_SYS_CODE g WITH(NOLOCK) ON g.CODE_TYPE = 31206 AND  b.VEH_CATEGORY = g.CODE_KEY
				LEFT JOIN IRD_SYS_CODE h WITH(NOLOCK) ON h.CODE_TYPE = 31202 AND b.VEH_USAGE_CODE = h.CODE_KEY
			WHERE
				a.CENTER_CODE = :centerCode
				AND a.STATUS = 'A'
				AND a.INSPECTION_RESULT IS NOT NULL
				AND a.INSP_TIME >= :startDate
				AND a.INSP_TIME < DATEADD(DAY, 1, :endDate)
		]]>
	</getAsmInspDataStatisticsPage>

	<getLugdownInspDataStatisticsPage type="sql">
		<![CDATA[
			SELECT
				a.INSP_MASTER_ID AS inspMasterId,
				a.NO_OF_TIMES_INSP AS noOfTimesInsp,
				c.CENTER_NAME_CN AS centerNameCn,
				a.PLATE_NO AS plateNo,
				b.VEH_TYPE AS vehType,
				b.VIN AS vin,
				a.ENGINE_NO AS engineNo,
				b.VEH_BRAND_CODE AS vehBrandCode,
				b.VEH_MODEL AS vehModel,
				b.VEH_BUILD_YEAR AS vehBuildYear,
				b.VTA_YEAR AS vtaYear,
				b.VEH_REG_DATE AS vehRegDate,
				b.MAX_POWER AS maxPower,
				b.POWER_UNIT_TYPE AS powerUnitType,
				b.CYLINDER_VOL AS cylinderVol,
				b.FUEL_TYPE AS fuelType,
				d.CODE_CNAME AS fuelTypeCn,
				d.CODE_PNAME AS fuelTypePt,
				e.CODE_CNAME AS fuelSupplyTypeCn,
				b.VEH_CATEGORY AS vehCategory,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_CNAME ELSE f.CODE_CNAME END AS vehCategoryCn,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_PNAME ELSE f.CODE_PNAME END AS vehCategoryPt,
				b.VEH_USAGE_CODE AS vehUsageCode,
				h.CODE_CNAME AS vehUsageCodeCn,
				H.CODE_PNAME AS vehUsageCodePt,
				b.VEH_BUILD_CTRY_CODE AS vehBuildCtryCode,
				b.VEH_WEIGHT AS vehWeight,
				b.VEH_GROSS_WEIGHT AS vehGrossWeight,
				a.INSP_TIME AS inspTime,
				a.F_HSU_100 AS ffHsu100,
				a.F_HSU_90 AS ffHsu90,
				a.F_HSU_80 AS ffHsu80,
				a.F_MAX_WP AS ffMaxWp,
				a.F_OVERALL_RESULT AS ffOverallResult,
				ROW_NUMBER () OVER ( /**/ORDER/**/ BY a.INSP_TIME ASC ) AS ROW
			FROM
				IRD_INP_RESULT a WITH(NOLOCK)
				LEFT JOIN IRD_VEM_VEHICLE b WITH(NOLOCK) ON a.VEH_ID = b.VEH_ID
				LEFT JOIN IRD_CTR_CENTER c WITH(NOLOCK) ON c.CENTER_CODE = a.CENTER_CODE
				LEFT JOIN IRD_SYS_CODE d WITH(NOLOCK) ON d.CODE_TYPE = 31212 AND b.FUEL_TYPE = d.CODE_KEY
				LEFT JOIN IRD_SYS_CODE e WITH(NOLOCK) ON e.CODE_TYPE = 31219 AND b.FUEL_SUPPLY_TYPE = e.CODE_KEY
				LEFT JOIN IRD_SYS_CODE f WITH(NOLOCK) ON f.CODE_TYPE = 31205 AND b.VEH_CATEGORY = f.CODE_KEY
				LEFT JOIN IRD_SYS_CODE g WITH(NOLOCK) ON g.CODE_TYPE = 31206 AND  b.VEH_CATEGORY = g.CODE_KEY
				LEFT JOIN IRD_SYS_CODE h WITH(NOLOCK) ON h.CODE_TYPE = 31202 AND b.VEH_USAGE_CODE = h.CODE_KEY
			WHERE
				a.CENTER_CODE = :centerCode
				AND a.STATUS = 'A'
				AND a.INSPECTION_RESULT IS NOT NULL
				AND a.INSP_TIME >= :startDate
				AND a.INSP_TIME < DATEADD(DAY, 1, :endDate)
		]]>
	</getLugdownInspDataStatisticsPage>

	<getMotorcycleIdleInspDataStatisticsPage type="sql">
		<![CDATA[
			SELECT
				a.INSP_MASTER_ID AS inspMasterId,
				a.NO_OF_TIMES_INSP AS noOfTimesInsp,
				c.CENTER_NAME_CN AS centerNameCn,
				a.PLATE_NO AS plateNo,
				b.VEH_TYPE AS vehType,
				b.VIN AS vin,
				a.ENGINE_NO AS engineNo,
				b.VEH_BRAND_CODE AS vehBrandCode,
				b.VEH_MODEL AS vehModel,
				b.VEH_BUILD_YEAR AS vehBuildYear,
				b.VTA_YEAR AS vtaYear,
				b.VEH_REG_DATE AS vehRegDate,
				b.MAX_POWER AS maxPower,
				b.POWER_UNIT_TYPE AS powerUnitType,
				b.CYLINDER_VOL AS cylinderVol,
				b.FUEL_TYPE AS fuelType,
				d.CODE_CNAME AS fuelTypeCn,
				d.CODE_PNAME AS fuelTypePt,
				e.CODE_CNAME AS fuelSupplyTypeCn,
				b.VEH_CATEGORY AS vehCategory,
				f.CODE_CNAME AS vehCategoryCn,
				f.CODE_PNAME AS vehCategoryPt,
				b.VEH_USAGE_CODE AS vehUsageCode,
				h.CODE_CNAME AS vehUsageCodeCn,
				H.CODE_PNAME AS vehUsageCodePt,
				b.VEH_BUILD_CTRY_CODE AS vehBuildCtryCode,
				b.VEH_WEIGHT AS vehWeight,
				b.VEH_GROSS_WEIGHT AS vehGrossWeight,
				a.INSP_TIME AS inspTime,
				a.D_CO_IDLE AS ddCoIdle,
				a.D_HC_IDLE AS ddHcIdle,
				a.D_HC_IDLE_RESULT AS ddHcIdleResult,
				ROW_NUMBER () OVER ( /**/ORDER/**/ BY a.INSP_TIME ASC ) AS ROW
			FROM
				IRD_INP_RESULT a WITH(NOLOCK)
				LEFT JOIN IRD_VEM_VEHICLE b WITH(NOLOCK) ON a.VEH_ID = b.VEH_ID
				LEFT JOIN IRD_CTR_CENTER c WITH(NOLOCK) ON c.CENTER_CODE = a.CENTER_CODE
				LEFT JOIN IRD_SYS_CODE d WITH(NOLOCK) ON d.CODE_TYPE = 31212 AND b.FUEL_TYPE = d.CODE_KEY
				LEFT JOIN IRD_SYS_CODE e WITH(NOLOCK) ON e.CODE_TYPE = 31219 AND b.FUEL_SUPPLY_TYPE = e.CODE_KEY
				LEFT JOIN IRD_SYS_CODE f WITH(NOLOCK) ON f.CODE_TYPE = 31205 AND b.VEH_CATEGORY = f.CODE_KEY
				LEFT JOIN IRD_SYS_CODE h WITH(NOLOCK) ON h.CODE_TYPE = 31202 AND b.VEH_USAGE_CODE = h.CODE_KEY
			WHERE
				a.CENTER_CODE = :centerCode
				AND (a.VEH_TYPE = 'C' OR a.VEH_TYPE = 'M')
				AND a.STATUS = 'A'
				AND a.INSPECTION_RESULT IS NOT NULL
				AND a.INSP_TIME >= :startDate
				AND a.INSP_TIME < DATEADD(DAY, 1, :endDate)
		]]>
	</getMotorcycleIdleInspDataStatisticsPage>

	<getCarDoubleIdleInspDataStatisticsPage type="sql">
		<![CDATA[
			SELECT
				a.INSP_MASTER_ID AS inspMasterId,
				a.NO_OF_TIMES_INSP AS noOfTimesInsp,
				c.CENTER_NAME_CN AS centerNameCn,
				a.PLATE_NO AS plateNo,
				b.VEH_TYPE AS vehType,
				b.VIN AS vin,
				a.ENGINE_NO AS engineNo,
				b.VEH_BRAND_CODE AS vehBrandCode,
				b.VEH_MODEL AS vehModel,
				b.VEH_BUILD_YEAR AS vehBuildYear,
				b.VTA_YEAR AS vtaYear,
				b.VEH_REG_DATE AS vehRegDate,
				b.MAX_POWER AS maxPower,
				b.POWER_UNIT_TYPE AS powerUnitType,
				b.CYLINDER_VOL AS cylinderVol,
				b.FUEL_TYPE AS fuelType,
				d.CODE_CNAME AS fuelTypeCn,
				d.CODE_PNAME AS fuelTypePt,
				e.CODE_CNAME AS fuelSupplyTypeCn,
				b.VEH_CATEGORY AS vehCategory,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_CNAME ELSE f.CODE_CNAME END AS vehCategoryCn,
				CASE b.VEH_CATEGORY WHEN 'I' THEN g.CODE_PNAME ELSE f.CODE_PNAME END AS vehCategoryPt,
				b.VEH_USAGE_CODE AS vehUsageCode,
				h.CODE_CNAME AS vehUsageCodeCn,
				H.CODE_PNAME AS vehUsageCodePt,
				b.VEH_BUILD_CTRY_CODE AS vehBuildCtryCode,
				b.VEH_WEIGHT AS vehWeight,
				b.VEH_GROSS_WEIGHT AS vehGrossWeight,
				a.INSP_TIME AS inspTime,
				a.B_CO_IDLE AS bbCoIdle,
				a.B_HC_IDLE AS bbHcIdle,
				a.B_CO_HIGH_IDLE AS bbCoHighIdle,
				a.B_HC_HIGH_IDLE AS bbHcHighIdle,
				a.B_OVERALL_RESULT AS bbOverallResult,
				ROW_NUMBER () OVER ( /**/ORDER/**/ BY a.INSP_TIME ASC ) AS ROW
			FROM
				IRD_INP_RESULT a WITH(NOLOCK)
				LEFT JOIN IRD_VEM_VEHICLE b WITH(NOLOCK) ON a.VEH_ID = b.VEH_ID
				LEFT JOIN IRD_CTR_CENTER c WITH(NOLOCK) ON c.CENTER_CODE = a.CENTER_CODE
				LEFT JOIN IRD_SYS_CODE d WITH(NOLOCK) ON d.CODE_TYPE = 31212 AND b.FUEL_TYPE = d.CODE_KEY
				LEFT JOIN IRD_SYS_CODE e WITH(NOLOCK) ON e.CODE_TYPE = 31219 AND b.FUEL_SUPPLY_TYPE = e.CODE_KEY
				LEFT JOIN IRD_SYS_CODE f WITH(NOLOCK) ON f.CODE_TYPE = 31205 AND b.VEH_CATEGORY = f.CODE_KEY
				LEFT JOIN IRD_SYS_CODE g WITH(NOLOCK) ON g.CODE_TYPE = 31206 AND  b.VEH_CATEGORY = g.CODE_KEY
				LEFT JOIN IRD_SYS_CODE h WITH(NOLOCK) ON h.CODE_TYPE = 31202 AND b.VEH_USAGE_CODE = h.CODE_KEY
			WHERE
				a.CENTER_CODE = :centerCode
				AND a.STATUS = 'A'
				AND a.INSPECTION_RESULT IS NOT NULL
				AND a.INSP_TIME >= :startDate
				AND a.INSP_TIME < DATEADD(DAY, 1, :endDate)
		]]>
	</getCarDoubleIdleInspDataStatisticsPage>

</queries>
